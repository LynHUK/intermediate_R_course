library(tidyverse)
library(NHSRdatasets)
# make a dataframe
data <- ae_attendances
library(tidyverse)
library(NHSRdatasets)
library(tidyverse)
library(NHSRdatasets)
# make a dataframe
data <- ae_attendances
View(data)
# get list of column names
colnames(data)      # works on matrices and data frames
names(data)         # works on vectors and data frames
# using $ sign to select a column
data$type
# get list of unique data items in a variable
unique(data$org_code)
# we can select a specific entry within that vector with square brackets
# to call the 4th entry we can use
data$type[4]
# we could also call the 4th to 10th entries
data$type[4:10]
# get the range of a variable (useful for dates)
range(data$period)
# see structure of data to check data types
str(data)
# see the first 5 rows of data
head(data)
# see the last 5 rows of data
tail(data)
# see the first 15 rows of data
head(data,
15)
# see the first 15 rows of data
dplyr::slice_head(data,
n = 15)
# see the first 15% of total rows of data
slice_head(data,
prop = .15)
# see the first 15% of total rows of data
# ordered by attendances
slice_max(data,
prop = .15,
order_by = attendances)
?slice
# make a dataframe
data <- ae_attendances
# see summary statistics of a dataframe
# summary is a super function that also can give great summaries of other
# objects - such as linear models
summary(data)
# quick counts by a column
table (data$type)
# or by 2 columns
table (data$type,
data$org_code)
data <- data |>
rename(`Organisation Code` = org_code)
?gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
install.packages("webexercises")
### Setting things up
# You'll often want to include a sample of your dataframe rather than the whole thing, particularly if it's very large.
# Ctrl + F7 will open a new source column
library(dplyr)
library(datapasta)
fresh_data <- NHSRdatasets::LOS_model |> dplyr::slice_sample(n = 20) # slice_sample(prop=0.2) will randomly select 20% of rows
### Editing the data
fresh_data |> datapasta::dpasta()
fresh_data |> datapasta::dpasta()
#create a dataframe of organisation names and aliases
Organisation <- unique(NHSRdatasets::LOS_model$Organisation)
length(Organisation) #checks the length of the vector Organisation
alias <- letters[1:10] #if you want to automate this you could use letters[1:length(Organisation)]
df <- data.frame(Organisation, alias) #combines the 2 vectors into a dataframe
# join the dataframe we just created to the LOS_model dataframe, select the columns we want & take a sample 10 rows, before piping it into dput() to create the code we can share.
dplyr::left_join(NHSRdatasets::LOS_model, df) |> select(Age, alias, Death) |> slice_sample(n=10) |> dput()
?dput
### Setting things up
# You'll often want to include a sample of your dataframe rather than the whole thing, particularly if it's very large.
# Ctrl + F7 will open a new source column
library(dplyr)
library(datapasta)
fresh_data <- NHSRdatasets::LOS_model |> dplyr::slice_sample(n = 20) # slice_sample(prop=0.2) will randomly select 20% of rows
### Editing the data
# You can edit the resulting tibble, then assign it to an object.
# fresh_edited_data <-
fresh_data |> datapasta::dpasta()
#Some code you want to use the dataframe in
ggplot2::ggplot(data = fresh_edited_data, aes(x=Organisation, y = Age)) +geom_point()
library(dplyr)
library(datapasta)
fresh_data <- NHSRdatasets::LOS_model |> dplyr::slice_sample(n = 20) # This produces a sample dataframe of 20 randomly selected rows. slice_sample(prop=0.2) will randomly select 20% of rows
fresh_edited_data |> dput()
str(NHSRdatasets::LOS_model)
# ensure we are using a clean data frame
data <- NHSRdatasets::ae_attendances
df_one <- data |>
select (period,
org_code,
type,
attendances) |>
head()
df_two <- data |>
select (where(is.numeric)) |>
head()
library(dplyr)
df_one <- data |>
select (period,
org_code,
type,
attendances) |>
head()
df_two <- data |>
select (where(is.numeric)) |>
head()
