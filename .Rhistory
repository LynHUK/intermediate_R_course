?colnames
?names
install.packages("learnr")
#library(tidyverse)
library(NHSRdatasets)
################################
# Some useful base R functions #
################################
# make a dataframe
data <- ae_attendances
# get list of column names
colnames(data)
# using $ sign to select a column
data$type
# get list of unique data items in a variable
unique(data$org_code)
# we can select a specific entry within that vector with square brackets
# to call the 4th entry we can use
data$type[4]
# we could also call the 4th to 10th entries
data$type[4:10]
# note to python users, we start counting at 1 and not zero
# we also include the 10th entry
#  this is very different to how python does indexing
# get number of distinct entries
n_distinct(data$org_code)
?n_distinct
??n_distinct
# get number of distinct entries
dplyr::n_distinct(data$org_code)
# get the range of a variable (useful for dates)
range(data$period)
# see structure of data to check data types
str(data)
# see the first 5 rows of data
head(data)
# see the last 5 rows of data
tail(data)
# see the first 15 rows of data
head(data,
15)
# see the first 15 rows of data - but using dpylr
top_n(data,
15)
??top_n
?top_frac
?top_frac
top_frac(data,
.15)
library(tidyverse)
# see the first 15% of total rows of data
# (defaults to last variable to order by)
top_frac(data,
.15)
library(tidyverse)
library(NHSRdatasets)
data <- ae_attendances
View(data)
# get list of column names
colnames(data)
# using $ sign to select a column
data$type
# get list of unique data items in a variable
unique(data$org_code)
# we can select a specific entry within that vector with square brackets
# to call the 4th entry we can use
data$type[4]
# we could also call the 4th to 10th entries
data$type[4:10]
# get the range of a variable (useful for dates)
range(data$period)
# see structure of data to check data types
str(data)
# see the first 5 rows of data
head(data)
# see the last 5 rows of data
tail(data)
# see the first 15 rows of data
head(data,
15)
# get number of distinct entries
dplyr::n_distinct(data$org_code)
# see the first 15 rows of data
dplyr::top_n(data,
15)
# see the first 15% of total rows of data
# (defaults to last variable to order by)
top_frac(data,
.15)
# see the first 15% of total rows of data - but using dpylr
# ordered by attendances
top_frac(data,
.15,
attendances)
?top_frac
library(tidyverse)
library(NHSRdatasets)
################################
# Some useful base R functions #
################################
# make a dataframe
data <- ae_attendances
# get list of column names
colnames(data)      # works only with matrices and dataframes
names(data)         # works only with vectors and dataframes
# get list of unique data items in a variable
unique(data$org_code)
?range
?top_frac()
top_n(data,
-5,
attendances)
top_n(data,
-5,
admissions)
?NHSRdatasets
??NHSRdatasets
?ae_attendances
# see the first 15 rows of data
dplyr::slice_head(data,
n = 15)
install.packages("qrcode")
library(tidyverse)
library(NHSRdatasets)
################################
# Some useful base R functions #
################################
# make a dataframe
data <- ae_attendances
# see summary statistics of a dataframe
# summary is a super function that also can give great summaries of other
# objects - such as linear models
summary(data)
# quick counts by a column
table (data$type)
# or by 2 columns
table (data$type,
data$org_code)
# can do 3 columns but it starts to get silly how that is displayed
####################
# renaming columns #
####################
# dealing with spaces in variables (looking at you excel!)
# or if you want to rename a variable to a readable format for table
# lets rename our 'org_code' to 'Organisation Code'
# use back ticks to enclose a variable with with a space in it
# kind of the equivalent to square brackets in sql
data <- data |>
rename(`Organisation Code` = org_code)
# lets also rename some more variables to something horrible
data <- data |>
rename(Breaches = breaches,
PERIOD = period,
` type` = type)
# we now have the look of a typical NHS table
# we could clean all those names manually
# or we could call in a janitor to use a function to do this for us
library(janitor)
# if this is not installed, install it manually
data <- clean_names(data)
# phew! all better.
# <<< Over to you >>>>
# have a quick try at renaming breaches to 'number of breaches'
# then put it back again
# HINT - check the order or your rename!
data <- data |>
rename(`no of breaches` = breaches)
colnames(data)
data <- data |>
rename('breaches' = `no of breaches`)
#########################
# janitor has some other really helpful functions to
# convert excel dates to dates (if they do that weird numeric thing)
# find duplicate rows
# add quick totals
# check it out, tidyverse and janitor are probably the two librarys
# I call at the start of any analysis
# best to run this to ensure we are back to clean data
data <- ae_attendances
####################
# select statement #
####################
# The super useful select statement
# in very simple terms this works like a sql select statement
# we can select columns from our dataframe and in addition they
# will be ordered in the order we select them
data_select <- data |>
select (period,
org_code)
view(data_select)
# or
data_select <- data |>
select (org_code,
period)
view(data_select)
# I have included a view statement here to look at our data, there are various
# other ways to achieve the same without having do so so much or indeed any
# typing
# you can simply call the name of the dataframe object
data_select
# you can select over there on the top right hand size in the environment
# or my absolutely favourite is to hold control and click on an object name
# anyway back to codin'
# we can also do a simple rename at the select stage
data_select <- data |>
select (date_period = period,
organisation = org_code)
# can also do a ! or - for negative select
data_select <- data |>
select (!c(org_code,
period))
# NOTE - you have to put the multiples into a vector
data_select <- data |>
select (!org_code,
!period)
# THIS DOES NOT WORK
data_select <- data |>
select (-org_code,
-period)
# this does work
# we can use some additional verbs in our select statement
# select any column name that contains 'es'
data_select <- data |>
select (contains ('es'))
# select any column name that does not contains 'es'
data_select <- data |>
select (!contains ('es'))
# select columns where the data is numeric
data_select <- data |>
select (where(is.numeric))
# select breaches then admissions and then everything else as it is
data_select <- data |>
select (admissions,
breaches,
everything())
# <<< Over to you >>>>
# select the data so that it is order of admissions,
# any column that is a factor and then anything else
data_select <- data |>
select(admissions,
where(is.factor),
everything())
#########################
# see summary statistics of a dataframe
# summary is a super function that also can give great summaries of other
# objects - such as linear models
summary(data)
table (data$type)
?janitor
?janitor
?dplyr::slice_
?dplyr::slice_head
library(tidyverse)
library(NHSRdatasets)
################################
# Some useful base R functions #
################################
# make a dataframe
data <- ae_attendances
# get list of column names
colnames(data)      # works on matrices and data frames
names(data)         # works on vectors and data frames
# using $ sign to select a column
data$type
# get list of unique data items in a variable
unique(data$org_code)
# we can select a specific entry within that vector with square brackets
# to call the 4th entry we can use
data$type[4]
# we could also call the 4th to 10th entries
data$type[4:10]
# note to python users, we start counting at 1 and not zero
# we also include the 10th entry
#  this is very different to how python does indexing
# get the range of a variable (useful for dates)
range(data$period)
# see structure of data to check data types
str(data)
# see the first 5 rows of data
head(data)
# see the last 5 rows of data
tail(data)
# see the first 15 rows of data
head(data,
15)
## Some useful functions from the dplyr package
# see the first 15 rows of data
dplyr::slice_head(data,
n = 15)
# see the first 15% of total rows of data
# (defaults to last variable to order by)
slice_head(data,
prop = .15)
# see the first 15% of total rows of data - but using dpylr
# ordered by attendances
slice_head(data,
prop = .15,
order_by = attendances)
slice_head(data, n=5, -attendances)
slice_head(data, n=5, order_by = -attendances)
slice_head(data, n=-5, order_by = attendances)
data |> slice_head(n=-5, order_by = attendances)
# see the first 15% of total rows of data - but using dpylr
# ordered by attendances
slice_head(data,
prop = .15,
order_by = attendances)
# see the first 15% of total rows of data
# (defaults to last variable to order by)
slice_head(data,
prop = .15)
# see the first 15% of total rows of data - but using dpylr
# ordered by attendances
slice_head(data,
prop = .15,
order_by = `attendances`)
# see the first 15% of total rows of data - but using dpylr
# ordered by attendances
slice_head(data,
prop = .15,
order_by = attendances)
# see the first 15% of total rows of data
# (defaults to last variable to order by)
slice_head(data,
prop = .15)
# see the first 15% of total rows of data - but using dpylr
# ordered by attendances
slice_head(data,
prop = .15,
order_by = period)
# see the first 15% of total rows of data - but using dpylr
# ordered by attendances
data |> slice_head(         prop = .15,
order_by = period)
# see the first 15% of total rows of data - but using dpylr
# ordered by attendances
slice_max(data,
prop = .15,
order_by = attendances)
library(tidyverse)
library(NHSRdatasets)
################################
# Some useful base R functions #
################################
# make a dataframe
data <- ae_attendances
q1_df<- slice_min(data, n=5, order_by = attendances)
q1_df$attendances
sum(q1_df$attendances)
q1_df<- slice_min(data, n=5, order_by = breaches)
sum(q1_df$attendances)
q1_df<- slice_min(data, n=5)
q1_df<- slice_min(data, prop = 0.05, order_by = breaches)
sum(q1_df$attendances)
question("Waht is the total attendance accross the 5 rows with the lowest attendances?",
answer("12"),
answer("17"),
answer("15"),
answer("5"))
library(learnr)
?question_numeric
??usethis
install.packages(c("shinylive", "httpuv"))
install.packages("shinylive")
shinylive::export(appdir = "shinylive_folder", destdir = "docs")
shinylive::export(appdir = "shinylive_folder", destdir = "docs")
library(dplyr)
# ensure we are using a clean data frame
data <- NHSRdatasets::ae_attendances
df_one <- data |>
select (period,
org_code,
type,
attendances) |>
head()
df_two <- data |>
select (where(is.numeric)) |>
head()
# connect the two data frames together, side by side
# column bind
df_new <- cbind(df_one,
df_two)
# note "attendances" column is duplicated - which can cause issues - best to remove
# or rename - also maintains order - need to be mindful you have rows that line
# up
# we can also bind data frames by rows, this is similar to concatenation
# in sql, need matching columns
df_one <- data |>
head()
df_two <- data |>
tail()
df_new <- rbind(df_one,
df_two)
# if we dont have matching columns can use bind_rows
# which matches columns where they match and puts in na for where data does not
# match
df_one <- data |>
select (period,
org_code,
type,
attendances) |>
head()
df_two <- data |>
tail()
df_new <- bind_rows(df_one,
df_two)
# or in a pipe
df_new <- df_new |>
bind_rows(df_two)
# <<< Over to you >>>>
# create a dataframe of the top 5 admissions only
# and the bottom 5 attendances only and join the two columns together
df_one <- data |>
select(admissions) |>
top_n(5, admissions)
df_two <- data |>
select(attendances) |>
top_n(-5, attendances)
df_new <- bind_cols(df_one,
df_two)
View(df_new)
sum(df_new$admissions)/sum(df_new$attendances)*100
sum(df_new$admissions)/sum(df_new$attendances)
sum(df_new$admissions)
sum(df_new$attendances)
data_filter <- data |>
count(org_code,
sort = TRUE) |>
filter (n > 1)
library(dplyr)
library(dplyr)
# ensure we are using a clean data frame
data <- NHSRdatasets::ae_attendances
df_one <- data |>
select (period,
org_code,
type,
attendances) |>
head()
df_two <- data |>
select (where(is.numeric)) |>
head()
df_new <- cbind(df_one,
df_two)
